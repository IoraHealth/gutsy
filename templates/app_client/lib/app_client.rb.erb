#
# HEADS UP: Do not edit by hand (or do, I'm not your parent)
#   This file was generated by Gutsy:
#   https://github.com/IoraHealth/gutsy
#

require 'multi_json'
require 'recursive-open-struct'
<% api_versions.each do |version| -%>
require '<%= gem_name_snake %>/<%= version.name %>/adapter'
<% end -%>

Dir.glob(File.join(File.dirname(__FILE__), "<%= gem_name_snake %>", '**', '*.rb')).each do |file|
  require file
end

module <%= gem_name_pascal %>
  class << self
    attr_accessor :configuration
  end

  # Configure <%= gem_name_pascal %> someplace sensible,
  # like config/initializers/<%= gem_name_snake %>.rb
  #
  # @example
  #   <%= gem_name_pascal %>.configure do |config|
  #     config.base_url = '<%= base_url %>'
  #     # Specify credentials for OAuth browser-flow
  #     config.access_token = 'randomness'
  #     # or server-side flow
  #     config.api_key    = 'i-am-app'
  #     config.api_secret = 'am-secret-dont-tell'
  #   end
  def self.configure
    self.configuration ||= Configuration.new
    yield(configuration) if block_given?
  end

  class Configuration
    attr_accessor :access_token, :api_key, :api_secret,
                  :base_url, :options,
                  :adapter_factory, :api_version

    def options
      @options ||= {}
    end

    def api_version
      @api_version = options[:api_version] || '<%= api_versions.first.name %>'
    end

    def api_version=(version)
      options[:url] = "#{base_url}/api/#{resource_namespace}#{version}"
      @api_version = version
    end

    def adapter_factory
      version = options[:api_version] ? options[:api_version] : api_version
      @adapter_factory = <%= gem_name_pascal %>.const_get("#{version.upcase}")::Adapters::Http
    end

    def base_url=(url)
      options[:url] = "#{url}/api/#{resource_namespace}#{api_version}"
      @base_url = url
    end

    def resource_namespace
<% if api_versions.first.resource_namespace -%>
     options[:resource_namespace] || '<%= "#{api_versions.first.resource_namespace}/" %>'
<% end -%>
    end
  end
end
